// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	acl "github.com/app-net-interface/catalyst-sdwan-app-client/acl"
	common "github.com/app-net-interface/catalyst-sdwan-app-client/common"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ACL is an autogenerated mock type for the ACL type
type ACL struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *ACL) Create(ctx context.Context, data *acl.Input) (string, error) {
	ret := _m.Called(ctx, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *acl.Input) string); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *acl.Input) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, aclID
func (_m *ACL) Delete(ctx context.Context, aclID string) error {
	ret := _m.Called(ctx, aclID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, aclID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, aclID
func (_m *ACL) Get(ctx context.Context, aclID string) (*acl.ACL, error) {
	ret := _m.Called(ctx, aclID)

	var r0 *acl.ACL
	if rf, ok := ret.Get(0).(func(context.Context, string) *acl.ACL); ok {
		r0 = rf(ctx, aclID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acl.ACL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, aclID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, aclName
func (_m *ACL) GetByName(ctx context.Context, aclName string) (*acl.ACL, error) {
	ret := _m.Called(ctx, aclName)

	var r0 *acl.ACL
	if rf, ok := ret.Get(0).(func(context.Context, string) *acl.ACL); ok {
		r0 = rf(ctx, aclName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acl.ACL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, aclName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *ACL) List(ctx context.Context) ([]*acl.ACL, error) {
	ret := _m.Called(ctx)

	var r0 []*acl.ACL
	if rf, ok := ret.Get(0).(func(context.Context) []*acl.ACL); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*acl.ACL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, aclID, data
func (_m *ACL) Update(ctx context.Context, aclID string, data *acl.Input) (*common.UpdateResponse, error) {
	ret := _m.Called(ctx, aclID, data)

	var r0 *common.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *acl.Input) *common.UpdateResponse); ok {
		r0 = rf(ctx, aclID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *acl.Input) error); ok {
		r1 = rf(ctx, aclID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewACL interface {
	mock.TestingT
	Cleanup(func())
}

// NewACL creates a new instance of ACL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewACL(t mockConstructorTestingTNewACL) *ACL {
	mock := &ACL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

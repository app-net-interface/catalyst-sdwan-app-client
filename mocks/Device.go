// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	device "github.com/app-net-interface/catalyst-sdwan-app-client/device"
)

// Device is an autogenerated mock type for the Device type
type Device struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, templateID
func (_m *Device) Get(ctx context.Context, templateID string) (*device.Template, error) {
	ret := _m.Called(ctx, templateID)

	var r0 *device.Template
	if rf, ok := ret.Get(0).(func(context.Context, string) *device.Template); ok {
		r0 = rf(ctx, templateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*device.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttachedDevices provides a mock function with given fields: ctx, templateID
func (_m *Device) GetAttachedDevices(ctx context.Context, templateID string) ([]*device.AttachedDevice, error) {
	ret := _m.Called(ctx, templateID)

	var r0 []*device.AttachedDevice
	if rf, ok := ret.Get(0).(func(context.Context, string) []*device.AttachedDevice); ok {
		r0 = rf(ctx, templateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*device.AttachedDevice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, templateName
func (_m *Device) GetByName(ctx context.Context, templateName string) (*device.Template, error) {
	ret := _m.Called(ctx, templateName)

	var r0 *device.Template
	if rf, ok := ret.Get(0).(func(context.Context, string) *device.Template); ok {
		r0 = rf(ctx, templateName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*device.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromSite provides a mock function with given fields: ctx, siteID
func (_m *Device) GetFromSite(ctx context.Context, siteID string) (*device.Template, error) {
	ret := _m.Called(ctx, siteID)

	var r0 *device.Template
	if rf, ok := ret.Get(0).(func(context.Context, string) *device.Template); ok {
		r0 = rf(ctx, siteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*device.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, siteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *Device) List(ctx context.Context) ([]*device.Template, error) {
	ret := _m.Called(ctx)

	var r0 []*device.Template
	if rf, ok := ret.Get(0).(func(context.Context) []*device.Template); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*device.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushConfiguration provides a mock function with given fields: ctx, attachedDevices, templateID
func (_m *Device) PushConfiguration(ctx context.Context, attachedDevices []*device.AttachedDevice, templateID string) (string, error) {
	ret := _m.Called(ctx, attachedDevices, templateID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, []*device.AttachedDevice, string) string); ok {
		r0 = rf(ctx, attachedDevices, templateID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*device.AttachedDevice, string) error); ok {
		r1 = rf(ctx, attachedDevices, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, template
func (_m *Device) Update(ctx context.Context, template *device.Template) (*device.UpdateResponse, error) {
	ret := _m.Called(ctx, template)

	var r0 *device.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *device.Template) *device.UpdateResponse); ok {
		r0 = rf(ctx, template)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*device.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *device.Template) error); ok {
		r1 = rf(ctx, template)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDevice interface {
	mock.TestingT
	Cleanup(func())
}

// NewDevice creates a new instance of Device. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDevice(t mockConstructorTestingTNewDevice) *Device {
	mock := &Device{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	vmanage "github.com/app-net-interface/catalyst-sdwan-app-client/vmanage"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ACL provides a mock function with given fields:
func (_m *Client) ACL() vmanage.ACL {
	ret := _m.Called()

	var r0 vmanage.ACL
	if rf, ok := ret.Get(0).(func() vmanage.ACL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.ACL)
		}
	}

	return r0
}

// Connection provides a mock function with given fields:
func (_m *Client) Connection() vmanage.Connection {
	ret := _m.Called()

	var r0 vmanage.Connection
	if rf, ok := ret.Get(0).(func() vmanage.Connection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.Connection)
		}
	}

	return r0
}

// Device provides a mock function with given fields:
func (_m *Client) Device() vmanage.Device {
	ret := _m.Called()

	var r0 vmanage.Device
	if rf, ok := ret.Get(0).(func() vmanage.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.Device)
		}
	}

	return r0
}

// Feature provides a mock function with given fields:
func (_m *Client) Feature() vmanage.Feature {
	ret := _m.Called()

	var r0 vmanage.Feature
	if rf, ok := ret.Get(0).(func() vmanage.Feature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.Feature)
		}
	}

	return r0
}

// GetToken provides a mock function with given fields:
func (_m *Client) GetToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *Client) Login(ctx context.Context, username string, password string) error {
	ret := _m.Called(ctx, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Policy provides a mock function with given fields:
func (_m *Client) Policy() vmanage.Policy {
	ret := _m.Called()

	var r0 vmanage.Policy
	if rf, ok := ret.Get(0).(func() vmanage.Policy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.Policy)
		}
	}

	return r0
}

// SetToken provides a mock function with given fields: token
func (_m *Client) SetToken(token string) {
	_m.Called(token)
}

// Site provides a mock function with given fields:
func (_m *Client) Site() vmanage.Site {
	ret := _m.Called()

	var r0 vmanage.Site
	if rf, ok := ret.Get(0).(func() vmanage.Site); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.Site)
		}
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Client) Status() vmanage.Status {
	ret := _m.Called()

	var r0 vmanage.Status
	if rf, ok := ret.Get(0).(func() vmanage.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.Status)
		}
	}

	return r0
}

// VPC provides a mock function with given fields:
func (_m *Client) VPC() vmanage.VPC {
	ret := _m.Called()

	var r0 vmanage.VPC
	if rf, ok := ret.Get(0).(func() vmanage.VPC); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.VPC)
		}
	}

	return r0
}

// VPN provides a mock function with given fields:
func (_m *Client) VPN() vmanage.VPN {
	ret := _m.Called()

	var r0 vmanage.VPN
	if rf, ok := ret.Get(0).(func() vmanage.VPN); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmanage.VPN)
		}
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

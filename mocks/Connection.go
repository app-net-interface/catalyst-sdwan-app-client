// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	connection "github.com/app-net-interface/catalyst-sdwan-app-client/connection"

	mock "github.com/stretchr/testify/mock"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, parameters
func (_m *Connection) Create(ctx context.Context, parameters *connection.Parameters) (string, error) {
	ret := _m.Called(ctx, parameters)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *connection.Parameters) string); ok {
		r0 = rf(ctx, parameters)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *connection.Parameters) error); ok {
		r1 = rf(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: ctx, cloudType
func (_m *Connection) GetStatus(ctx context.Context, cloudType string) ([]*connection.Status, error) {
	ret := _m.Called(ctx, cloudType)

	var r0 []*connection.Status
	if rf, ok := ret.Get(0).(func(context.Context, string) []*connection.Status); ok {
		r0 = rf(ctx, cloudType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*connection.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cloudType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConnection interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnection(t mockConstructorTestingTNewConnection) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

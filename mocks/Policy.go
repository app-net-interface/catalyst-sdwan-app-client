// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	policy "github.com/app-net-interface/catalyst-sdwan-app-client/policy"
)

// Policy is an autogenerated mock type for the Policy type
type Policy struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *Policy) Create(ctx context.Context, data *policy.Input) (string, error) {
	ret := _m.Called(ctx, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *policy.Input) string); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *policy.Input) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, policyID
func (_m *Policy) Delete(ctx context.Context, policyID string) error {
	ret := _m.Called(ctx, policyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, policyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, policyID
func (_m *Policy) Get(ctx context.Context, policyID string) (*policy.Input, error) {
	ret := _m.Called(ctx, policyID)

	var r0 *policy.Input
	if rf, ok := ret.Get(0).(func(context.Context, string) *policy.Input); ok {
		r0 = rf(ctx, policyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*policy.Input)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, policyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *Policy) List(ctx context.Context) ([]*policy.Policy, error) {
	ret := _m.Called(ctx)

	var r0 []*policy.Policy
	if rf, ok := ret.Get(0).(func(context.Context) []*policy.Policy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*policy.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPolicy interface {
	mock.TestingT
	Cleanup(func())
}

// NewPolicy creates a new instance of Policy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPolicy(t mockConstructorTestingTNewPolicy) *Policy {
	mock := &Policy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
